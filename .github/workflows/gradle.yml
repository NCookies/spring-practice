# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ master ]

# 해당 코드에서 사용될 변수 설정
env:
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: spring-practice
  S3_BUCKET_NAME: ncookie-github-actions-s3-bucket
  CODE_DEPLOY_APP_NAME: codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: codedeploy-deployment-group

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      ## create application-database.yaml
      - name: Make application-database.properties
        run: |
          ## create application-database.properties
          echo "cd"
          cd ./src/main/resources

          # application-database.properties 파일 생성
          echo "ls"
          ls -al
          echo "touch"
          touch ./application.properties

          echo "ls"
          ls -al
          echo "write 1"
          echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> ./application.properties
          
          echo "write 2"
          echo "spring.datasource.url=jdbc:mysql://localhost:3306/board" >> ./application.properties
          
          echo "write 3"
          echo "spring.datasource.username=root" >> ./application.properties
          
          echo "write 4"
          echo "spring.datasource.password=root" >> ./application.properties
        shell: bash
          
      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          mysql database: 'board' 
          mysql user: 'root'
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

      # gradlew 파일 실행권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build
        shell: bash
#       - name: Build with Gradle
#         uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#         with:
#           arguments: build

      # create application-aws.properties
      - name: Make application-aws.properties
        if: contains(github.ref, 'master')
        run: |
          echo "ls -a . & pwd"
          pwd
          ls -a .
          echo "mkdir & touch"
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-aws.properties
          pwd
          ls -a .
          echo "copy properties"
          echo $DEV_PROP >> ./application-aws.properties
          cat application-aws.properties
        shell: bash
        env:
          DEV_PROP: ${{ secrets.PROPERTIES }}

      # AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
